#pragma once
namespace std {
    template<typename T, typename I>
    void itoa(T *, T *, I);
    template<typename T, typename I>
    T accumulate(T *, T *, T);
    template<typename T, typename O, typename I>
    T accumulate(T *, T *, T, O);

    template<typename T, typename I>
    void itoa(T *begin, T *end, I value) {
        while (begin != end) {
            *begin = value;
            begin ++;
            value ++;
        }
    }

    template<typename T, typename I>
    T accumulate(T *begin, T *end, I val) {
        while (begin != end) {
            val = val + *begin;
            begin ++;
        }
        return val;
    }
    template<typename T, typename O, typename I>
    T accumulate(T *begin, T *end, I val, O oper) {
        while (begin != end) {
            val = oper(val, *begin);
            begin ++;
        }
        return val;
    }
}